import sbt._
import Keys._
import play.Project._
import com.typesafe.sbteclipse.core.EclipsePlugin.EclipseKeys
import com.hibu.bragger.sbt.BraggerSbtPlugin._
import com.hibu.bragger.sbt.BraggerSbtPlugin.BraggerKeys._

object ApplicationBuild extends Build {

	val appName    = "petstore-client"
	val appVersion = "1.3.0-SNAPSHOT"
	
	val appDependencies = Seq(
		"com.hibu" % "bragger-core" % appVersion,
		javaCore
	)
	
	lazy val main = play.Project(appName, appVersion, appDependencies).settings(

	    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	    braggerClients := Seq(Api("http://localhost:9000/docs/api-docs.wsdl/pet", "com.hibu.api.petservice", "codegen")),
		sourceGenerators in Compile <+= braggerGenerate in Compile,
		sourceGenerators in Test <+= braggerGenerate in Compile,
		unmanagedSourceDirectories in Compile <+= baseDirectory( _ / "codegen" / "src" ), // adding to the project sources the autogenerated code for calling the petstore api 
		unmanagedSourceDirectories in Test <+= baseDirectory( _ / "codegen" / "test" ),
		// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		
		// bragger repo
		resolvers in ThisBuild += "github pages repo" at "http://yelllabs.github.com/bragger",
		// easywsdl
		resolvers in ThisBuild += "petalslink" at "http://maven.petalslink.com/public",

		// sbt eclipse
		EclipseKeys.skipParents in ThisBuild:= false,
		EclipseKeys.withSource in ThisBuild := false

	).dependsOn(
		//play2Bragger
	).aggregate(
		//play2Bragger
	)
	
	lazy val play2Bragger = ProjectRef(file("../../../../modules/bragger-play2"), "bragger-play2")
	
}
